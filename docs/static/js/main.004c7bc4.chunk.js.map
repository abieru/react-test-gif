{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/Gifgrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getgif","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","Gifgrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","App","categorias","cateria","ReactDOM","render","document","getElementById"],"mappings":"6KAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OAEQ,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAQd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,mGACuFC,UAAUH,IADjG,SAECI,MAAOF,GAFR,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QATxB,kBAaXL,GAbW,4CAAH,sDCENQ,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,IAAKD,EAAW,EAAXA,MAE9B,OACI,sBAAKK,UAAU,yCAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCFHQ,EAAS,SAAC,GAAiB,IAAfpB,EAAc,EAAdA,SACrB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNzB,EAAOC,GACNyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGlB,CAACrB,IAGGsB,EDdwBK,CAAa3B,GAAhCc,EAAZ,EAAOP,KAAac,EAApB,EAAoBA,QASpB,OACI,qCACA,6BAAMrB,IACHqB,GAAW,mBAAGJ,UAAU,mCAAb,wBACd,qBAAKA,UAAU,YAAf,SAIQH,EAAOL,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aESdiB,EA9BH,WAGR,MAAmC1C,mBAAS,CAAC,eAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAKA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAqB,GAAO,OAClB,cAAC,EAAD,CAEA9B,SAAU8B,GADLA,Y,MCf7BC,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.004c7bc4.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategorias}) => {\n    const [inputValue, setinputValue]= useState('')  \n\n    const HandleInputChange = (e)=>{\n        setinputValue(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length >2  ){\n            setCategorias(cats => [inputValue,...cats]);\n            setinputValue('');\n        }\n        \n        \n    }\n\n    return (\n        \n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\"\n                    value={inputValue}\n                    onChange={HandleInputChange}\n                />\n            </form>\n\n        \n    )\n}\nAddCategory.propTypes ={\n    setCategorias: PropTypes.func.isRequired\n}","export const getgif = async(category )=>{\n    const URL = `https://api.giphy.com/v1/gifs/search?api_key=e0DS6CXLrn9ECiqXsoGsiB4M6Ufw5Gb6&limit=10&q=${ encodeURI(category) }`\n    const resp = await fetch (URL);\n    const {data} = await resp.json();\n   \n    const gifs = data.map(img=>{\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    \n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({url, title}) => {\n   \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const Gifgrid= ({ category })=> {\n    const {data:images, loading} = useFetchGifs(category);\n    \n\n    /*\n\n    */\n    //const [images, setimages] = useState([]);\n\n    \n    return (\n        <>\n        <h3>{ category }</h3>\n         { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n        <div className=\"card-grid\">\n            \n            \n            {\n                images.map( img=> (\n                    <GifGridItem \n                    key={img.id}  \n                    {...img}\n                    />\n                ))\n            }\n                \n   \n        </div>\n\n\n        </>\n\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getgif } from \"../helpers/getGif\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => { \n        getgif(category)\n        .then(imgs =>{\n            setState({\n                data: imgs,\n                loading: false\n            })\n        }) \n    }, [category])\n\n\n    return state; \n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { Gifgrid } from './components/Gifgrid';\n\nconst App = () =>{\n    \n    //const categorias = ['Demon Slayer', 'Evangelion', 'Naruto']\n    const [categorias, setCategorias]= useState(['Evangelion'])    \n    //cconst handleadd = ()=>{\n    //c    return setCategorias(['Boruto', ...categorias])\n    //}\n    \n    return (\n        <>\n            <h2>Gif expert App</h2>\n            <AddCategory setCategorias={setCategorias} />\n            <hr/>\n            \n            <ol>\n                {\n                    categorias.map(cateria =>(\n                        <Gifgrid \n                        key={cateria}\n                        category={cateria} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n\n\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}